generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PlayList {
  id              Int      @id @default(autoincrement())
  title           String
  tracks          Track[]
  description     String?
  coverImageUrl   String
  creator         User     @relation(fields: [creatorId], references: [id])
  creatorId       Int
  creatorUserName String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id                   Int        @id @default(autoincrement())
  email                String?    @unique
  password             String?
  name                 String     @unique
  avatar               String?
  createdAt            DateTime   @default(now())
  playlists            PlayList[]
  comments             Comment[]
  likes                Like[]
  dislikes             Dislike[]
  playingPlayListQueue Track[]
}

model LastFmTrack {
  id         Int     @id @default(autoincrement())
  trackId    String
  trackTitle String
  artist     String
  albumName  String?
  albumImg   String?
  duration   Int?
  playcount  Int?
  tags       Tag[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String

  LastFmTrack   LastFmTrack? @relation(fields: [lastFmTrackId], references: [id])
  lastFmTrackId Int?
  Track         Track?       @relation(fields: [trackId], references: [id])
  trackId       Int?
}

model Track {
  id          Int     @id @default(autoincrement())
  name        String
  artist      String
  albumTitle  String?
  albumImgUrl String
  tags        Tag[]
  mbid        String
  wiki        String
  // youtubeVideoId String?
  // playlists  PlayList[]
  // User       User?     @relation(fields: [userId], references: [id])
  // userId     Int?
  // Comment    Comment[]
  // Like       Like[]
  // Dislike    Dislike[]
  // PlayList   PlayList? @relation(fields: [playListId], references: [id])
  // playListId Int?
  // User       User?     @relation(fields: [userId], references: [id])

  PlayList   PlayList? @relation(fields: [playListId], references: [id])
  playListId Int?
  User       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  Comment    Comment[]
  Like       Like[]
  Dislike    Dislike[]
}

model YoutubeData {
  id      Int     @id @default(autoincrement())
  query   String?
  videoId String?
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   Int
}

model Dislike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   Int
}
